package erdari.renformer_android.data.room;

import android.content.Context;
import android.os.AsyncTask;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.room.Room;

import org.jetbrains.annotations.NotNull;

import erdari.renformer_android.data.model.User;
import erdari.renformer_android.data.room.database.UserDatabase;

/**
 * Room manager class for users.
 *
 * @author Ricard Pinilla Barnes
 */
public class UserRoom {

    private static final String DB_NAME = "db_user";

    private UserDatabase userDatabase;

    /**
     * Class constructor.
     *
     * @param context Tha current app context.
     * @author Ricard Pinilla Barnes
     */
    public UserRoom(Context context) {
        userDatabase = Room.databaseBuilder(context, UserDatabase.class, DB_NAME).build();
    }

    /**
     * Inserts an user into the room database.
     *
     * @param user The user to be inserted.
     * @return The auto assigned id.
     * @author Ricard Pinilla Barnes
     */
    public LiveData<Long> insertUser(final User user) {
        return Static.insertUser(userDatabase, user);
    }

    /**
     * Updates an user already persisted in the room database.
     *
     * @param user The user to update.
     * @author Ricard Pinilla Barnes
     */
    public void updateUser(final User user) {
        Static.updateUser(userDatabase, user);
    }

    /**
     * Deletes an user from the room database.
     *
     * @param user The user to be deleted.
     * @author Ricard Pinilla Barnes
     */
    public void deleteUser(final User user) {
        Static.deleteUser(userDatabase, user);
    }

    /**
     * Deletes all the users from the room database.
     *
     * @author Ricard Pinilla Barnes
     */
    public void nukeUsers() {
        Static.nukeUsers(userDatabase);
    }

    /**
     * Finds an user from the room database.
     *
     * @param id The id of the searched user.
     * @return The searched user if found.
     * @author Ricard Pinilla Barnes
     */
    public LiveData<User> getUserById(long id) {
        return userDatabase.daoAccess().findUserById(id);
    }

    /**
     * Static methods for the UserRoom class.
     * Those are needed to avoid memory leaks, as the methods run in parallel child threads.
     * Descriptions are the same as in the caller methods.
     *
     * @author Ricard Pinilla Barnes
     */
    private static class Static {

        /**
         * Description in the caller method.
         *
         * @param userDatabase An user database object.
         * @param user         An user object.
         * @return An autogenerated id.
         * @author Ricard Pinilla Barnes
         */
        @NotNull
        private static LiveData<Long> insertUser(
                final UserDatabase userDatabase,
                final User user
        ) {
            final MutableLiveData<Long> id = new MutableLiveData<>();

            new AsyncTask<Void, Void, Long>() {
                @Override
                protected Long doInBackground(Void... voids) {
                    return userDatabase.daoAccess().insertUser(user);
                }

                @Override
                protected void onPostExecute(Long aLong) {
                    id.postValue(aLong);
                }
            }.execute();

            return id;
        }

        /**
         * Description in the caller method.
         *
         * @param userDatabase An user database object.
         * @param user         An user object.
         * @author Ricard Pinilla Barnes
         */
        private static void updateUser(
                final UserDatabase userDatabase,
                final User user
        ) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    userDatabase.daoAccess().updateUser(user);
                    return null;
                }
            }.execute();
        }

        /**
         * Description in the caller method.
         *
         * @param userDatabase An user database object.
         * @param user         An user object.
         * @author Ricard Pinilla Barnes
         */
        private static void deleteUser(
                final UserDatabase userDatabase,
                final User user
        ) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    userDatabase.daoAccess().deleteUser(user);
                    return null;
                }
            }.execute();
        }

        /**
         * Description in the caller method.
         *
         * @param userDatabase An user database object.
         * @author Ricard Pinilla Barnes
         */
        private static void nukeUsers(final UserDatabase userDatabase) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    userDatabase.daoAccess().nukeUsers();
                    return null;
                }
            }.execute();
        }

    }

}
