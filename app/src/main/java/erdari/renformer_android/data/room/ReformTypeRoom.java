package erdari.renformer_android.data.room;

import android.content.Context;
import android.os.AsyncTask;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.room.Room;

import org.jetbrains.annotations.NotNull;

import erdari.renformer_android.data.model.ReformType;
import erdari.renformer_android.data.room.database.ReformTypeDatabase;

/**
 * Room manager class for reform type.
 *
 * @author Ricard Pinilla Barnes
 */
public class ReformTypeRoom {

    private static final String DB_NAME = "db_reform_type";

    private ReformTypeDatabase reformTypeDatabase;

    /**
     * Class constructor.
     *
     * @param context Tha current app context.
     * @author Ricard Pinilla Barnes
     */
    public ReformTypeRoom(Context context) {
        reformTypeDatabase = Room.databaseBuilder(context, ReformTypeDatabase.class, DB_NAME)
                .fallbackToDestructiveMigration()
                .build();
    }

    /**
     * Inserts an option into the room database.
     *
     * @param reformType The reform type to be inserted.
     * @return The auto assigned id.
     * @author Ricard Pinilla Barnes
     */
    public LiveData<Long> insertReformType(final ReformType reformType) {
        return Static.insertReformType(reformTypeDatabase, reformType);
    }

    /**
     * Updates an reform type already persisted in the room database.
     *
     * @param reformType The reform type to update.
     * @author Ricard Pinilla Barnes
     */
    public void updateReformType(final ReformType reformType) {
        Static.updateReformType(reformTypeDatabase, reformType);
    }

    /**
     * Deletes an reform type from the room database.
     *
     * @param reformType The reform type to be deleted.
     * @author Ricard Pinilla Barnes
     */
    public void deleteReformType(final ReformType reformType) {
        Static.deleteReformType(reformTypeDatabase, reformType);
    }

    /**
     * Deletes all the reform type from the room database.
     *
     * @author Ricard Pinilla Barnes
     */
    public void nukeReformTypes() {
        Static.nukeReformTypes(reformTypeDatabase);
    }

    /**
     * Finds an reform type from the room database.
     *
     * @param id The id of the searched reform type.
     * @return The searched reform type if found.
     * @author Ricard Pinilla Barnes
     */
    public LiveData<ReformType> getReformTypeById(long id) {
        return reformTypeDatabase.daoAccess().findReformTypeBy(id);
    }

    /**
     * Static methods for the ReformTypeRoom class.
     * Those are needed to avoid memory leaks, as the methods run in parallel child threads.
     * Descriptions are the same as in the caller methods.
     *
     * @author Ricard Pinilla Barnes
     */
    private static class Static {

        /**
         * Description in the caller method.
         *
         * @param reformTypeDatabase An reform type database object.
         * @param reformType         An reform type object.
         * @return An autogenerated id.
         * @author Ricard Pinilla Barnes
         */
        @NotNull
        private static LiveData<Long> insertReformType(
                final ReformTypeDatabase reformTypeDatabase,
                final ReformType reformType
        ) {
            final MutableLiveData<Long> id = new MutableLiveData<>();

            new AsyncTask<Void, Void, Long>() {
                @Override
                protected Long doInBackground(Void... voids) {
                    return reformTypeDatabase.daoAccess().insertReformType(reformType);
                }

                @Override
                protected void onPostExecute(Long aLong) {
                    id.postValue(aLong);
                }
            }.execute();

            return id;
        }

        /**
         * Description in the caller method.
         *
         * @param reformTypeDatabase An reform type database object.
         * @param reformType         An reform type object.
         * @author Ricard Pinilla Barnes
         */
        private static void updateReformType(
                final ReformTypeDatabase reformTypeDatabase,
                final ReformType reformType
        ) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    reformTypeDatabase.daoAccess().updateReformType(reformType);
                    return null;
                }
            }.execute();
        }

        /**
         * Description in the caller method.
         *
         * @param reformTypeDatabase An reform type database object.
         * @param reformType         An reform type object.
         * @author Ricard Pinilla Barnes
         */
        private static void deleteReformType(
                final ReformTypeDatabase reformTypeDatabase,
                final ReformType reformType
        ) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    reformTypeDatabase.daoAccess().deleteReformType(reformType);
                    return null;
                }
            }.execute();
        }

        /**
         * Description in the caller method.
         *
         * @param reformTypeDatabase An reform type database object.
         * @author Ricard Pinilla Barnes
         */
        private static void nukeReformTypes(final ReformTypeDatabase reformTypeDatabase) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    reformTypeDatabase.daoAccess().nukeReformTypes();
                    return null;
                }
            }.execute();
        }

    }

}
