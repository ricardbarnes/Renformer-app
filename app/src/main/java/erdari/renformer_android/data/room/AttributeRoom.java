package erdari.renformer_android.data.room;

import android.content.Context;
import android.os.AsyncTask;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.room.Room;

import org.jetbrains.annotations.NotNull;

import erdari.renformer_android.data.model.Attribute;
import erdari.renformer_android.data.room.database.AttributeDatabase;

/**
 * Room manager class for attributes.
 *
 * @author Ricard Pinilla Barnes
 */
public class AttributeRoom {

    private static final String DB_NAME = "db_attribute";

    private AttributeDatabase attributeDatabase;

    /**
     * Class constructor.
     *
     * @param context Tha current app context.
     * @author Ricard Pinilla Barnes
     */
    public AttributeRoom(Context context) {
        attributeDatabase = Room.databaseBuilder(context, AttributeDatabase.class, DB_NAME).build();
    }

    /**
     * Inserts an attribute into the room database.
     *
     * @param attribute The attribute to be inserted.
     * @return The auto assigned id.
     * @author Ricard Pinilla Barnes
     */
    public LiveData<Long> insertAttribute(final Attribute attribute) {
        return Static.insertAttribute(attributeDatabase, attribute);
    }

    /**
     * Updates an attribute already persisted in the room database.
     *
     * @param attribute The attribute to update.
     * @author Ricard Pinilla Barnes
     */
    public void updateAttribute(final Attribute attribute) {
        Static.updateAttribute(attributeDatabase, attribute);
    }

    /**
     * Deletes an attribute from the room database.
     *
     * @param attribute The attribute to be deleted.
     * @author Ricard Pinilla Barnes
     */
    public void deleteAttribute(final Attribute attribute) {
        Static.deleteAttribute(attributeDatabase, attribute);
    }

    /**
     * Deletes all the attributes from the room database.
     *
     * @author Ricard Pinilla Barnes
     */
    public void nukeAttributes() {
        Static.nukeAttributes(attributeDatabase);
    }

    /**
     * Finds an attribute from the room database.
     *
     * @param id The id of the searched attribute.
     * @return The searched attribute if found.
     * @author Ricard Pinilla Barnes
     */
    public LiveData<Attribute> findAttributeById(long id) {
        return attributeDatabase.daoAccess().findAttributeById(id);
    }

    /**
     * Static methods for the AttributeRoom class.
     * Those are needed to avoid memory leaks, as the methods run in parallel child threads.
     * Descriptions are the same as in the caller methods.
     *
     * @author Ricard Pinilla Barnes
     */
    private static class Static {

        /**
         * Description in the caller method.
         *
         * @param attributeDatabase An attribute database object.
         * @param attribute         An attribute object.
         * @return An autogenerated id.
         * @author Ricard Pinilla Barnes
         */
        @NotNull
        private static LiveData<Long> insertAttribute(
                final AttributeDatabase attributeDatabase,
                final Attribute attribute
        ) {
            final MutableLiveData<Long> id = new MutableLiveData<>();

            new AsyncTask<Void, Void, Long>() {
                @Override
                protected Long doInBackground(Void... voids) {
                    return attributeDatabase.daoAccess().insertAttribute(attribute);
                }

                @Override
                protected void onPostExecute(Long aLong) {
                    id.postValue(aLong);
                }
            }.execute();

            return id;
        }

        /**
         * Description in the caller method.
         *
         * @param attributeDatabase An attribute database object.
         * @param attribute         An attribute object.
         * @author Ricard Pinilla Barnes
         */
        private static void updateAttribute(
                final AttributeDatabase attributeDatabase,
                final Attribute attribute
        ) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    attributeDatabase.daoAccess().updateAttribute(attribute);
                    return null;
                }
            }.execute();
        }

        /**
         * Description in the caller method.
         *
         * @param attributeDatabase An attribute database object.
         * @param attribute         An attribute object.
         * @author Ricard Pinilla Barnes
         */
        private static void deleteAttribute(
                final AttributeDatabase attributeDatabase,
                final Attribute attribute
        ) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    attributeDatabase.daoAccess().deleteAttribute(attribute);
                    return null;
                }
            }.execute();
        }

        /**
         * Description in the caller method.
         *
         * @param attributeDatabase An attribute database object.
         * @author Ricard Pinilla Barnes
         */
        private static void nukeAttributes(final AttributeDatabase attributeDatabase) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    attributeDatabase.daoAccess().nukeAttributes();
                    return null;
                }
            }.execute();
        }

    }

}
