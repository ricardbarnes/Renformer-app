package erdari.renformer_android.data.room;

import android.content.Context;
import android.os.AsyncTask;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.room.Room;

import org.jetbrains.annotations.NotNull;

import erdari.renformer_android.data.model.Category;
import erdari.renformer_android.data.room.database.CategoryDatabase;

/**
 * Room manager class for categories.
 *
 * @author Ricard Pinilla Barnes
 */
public class CategoryRoom {

    private static final String DB_NAME = "db_category";

    private CategoryDatabase categoryDatabase;

    /**
     * Class constructor.
     *
     * @param context Tha current app context.
     * @author Ricard Pinilla Barnes
     */
    public CategoryRoom(Context context) {
        categoryDatabase = Room.databaseBuilder(context, CategoryDatabase.class, DB_NAME).build();
    }

    /**
     * Inserts a category into the room database.
     *
     * @param category The category to be inserted.
     * @return The auto assigned id.
     * @author Ricard Pinilla Barnes
     */
    public LiveData<Long> insertCategory(final Category category) {
        return Static.insertCategory(categoryDatabase, category);
    }

    /**
     * Updates a category already persisted in the room database.
     *
     * @param category The category to update.
     * @author Ricard Pinilla Barnes
     */
    public void updateCategory(final Category category) {
        Static.updateCategory(categoryDatabase, category);
    }

    /**
     * Deletes a category from the room database.
     *
     * @param category The category to be deleted.
     * @author Ricard Pinilla Barnes
     */
    public void deleteCategory(final Category category) {
        Static.deleteCategory(categoryDatabase, category);
    }

    /**
     * Deletes all the category from the room database.
     *
     * @author Ricard Pinilla Barnes
     */
    public void nukeCategories() {
        Static.nukeCategories(categoryDatabase);
    }

    /**
     * Finds a category from the room database.
     *
     * @param id The id of the searched category.
     * @return The searched category if found.
     * @author Ricard Pinilla Barnes
     */
    public LiveData<Category> findCategoryById(long id) {
        return categoryDatabase.daoAccess().findCategoryById(id);
    }

    /**
     * Static methods for the CategoryRoom class.
     * Those are needed to avoid memory leaks, as the methods run in parallel child threads.
     * Descriptions are the same as in the caller methods.
     *
     * @author Ricard Pinilla Barnes
     */
    private static class Static {

        /**
         * Description in the caller method.
         *
         * @param categoryDatabase An category database object.
         * @param category         An category object.
         * @return An autogenerated id.
         * @author Ricard Pinilla Barnes
         */
        @NotNull
        private static LiveData<Long> insertCategory(
                final CategoryDatabase categoryDatabase,
                final Category category
        ) {
            final MutableLiveData<Long> id = new MutableLiveData<>();

            new AsyncTask<Void, Void, Long>() {
                @Override
                protected Long doInBackground(Void... voids) {
                    return categoryDatabase.daoAccess().insertCategory(category);
                }

                @Override
                protected void onPostExecute(Long aLong) {
                    id.postValue(aLong);
                }
            }.execute();

            return id;
        }

        /**
         * Description in the caller method.
         *
         * @param categoryDatabase An category database object.
         * @param category         An category object.
         * @author Ricard Pinilla Barnes
         */
        private static void updateCategory(
                final CategoryDatabase categoryDatabase,
                final Category category
        ) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    categoryDatabase.daoAccess().updateCategory(category);
                    return null;
                }
            }.execute();
        }

        /**
         * Description in the caller method.
         *
         * @param categoryDatabase An category database object.
         * @param category         An category object.
         * @author Ricard Pinilla Barnes
         */
        private static void deleteCategory(
                final CategoryDatabase categoryDatabase,
                final Category category
        ) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    categoryDatabase.daoAccess().deleteCategory(category);
                    return null;
                }
            }.execute();
        }

        private static void nukeCategories(final CategoryDatabase categoryDatabase) {
            new AsyncTask<Void, Void, Void>() {
                @Override
                protected Void doInBackground(Void... voids) {
                    categoryDatabase.daoAccess().nukeCategories();
                    return null;
                }
            }.execute();
        }

    }

}
